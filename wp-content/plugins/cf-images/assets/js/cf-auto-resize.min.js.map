{"version":3,"file":"cf-auto-resize.min.js","mappings":"CAME,WACD,aAEA,MAAMA,EAAoB,CACzBC,MAAO,uBACPC,MAAO,yBAKP,IAAAC,GACC,MAAMC,EAASC,SAASC,qBAAsB,OAC9C,IAAM,MAAMC,KAASH,EACfI,KAAKC,gBAAiBF,IAMJ,KAApBA,EAAMG,YAAoBH,EAAMI,cACX,KAArBJ,EAAMK,aAAqBL,EAAMM,gBACjCN,EAAMG,YAAcH,EAAMI,eAC1BJ,EAAMK,aAAeL,EAAMM,eAMvBL,KAAKM,UAAWP,EAAMQ,OAC5BR,EAAMQ,IAAMR,EAAMQ,IAAIC,QAASR,KAAKN,MAAO,KAAMK,EAAMG,eACvDH,EAAMU,OAASV,EAAMQ,IAAM,QAAUR,EAAMQ,IAAIC,QAASR,KAAKN,MAAO,KAA0B,EAApBK,EAAMG,aAAuB,MAG1G,EAQA,eAAAD,CAAiBF,GAEhB,OAAOA,EAAMW,UAAUC,SAAUX,KAAKP,QAKjCM,EAAMG,cAAgBH,EAAMK,cAAgB,IAAML,EAAMG,aAKxDH,EAAMI,eAAiBJ,EAAMM,eAAiB,IAAMN,EAAMI,cAKxD,OAASJ,EAAMG,aAAe,OAASH,EAAMK,YACrD,EAQAE,UAAWM,GACI,cACDC,KAAMD,IAIrBE,OAAOC,iBAAkB,oBAAoB,IAAMvB,EAAkBG,QACtE,CA1EA","sources":["webpack://cf-images/./assets/_src/js/resize.js"],"sourcesContent":["/**\n * Automatic image resizing, based on DOM size.\n *\n * @author Anton Vanyukov <a.vanyukov@vcore.ru>\n * @since 1.2.0\n */\n( function() {\n\t'use strict';\n\n\tconst CFAutoImageResize = {\n\t\tclass: 'cf-image-auto-resize',\n\t\tregex: /w=\\d{1,4}(,h=\\d{1,4})?/,\n\n\t\t/**\n\t\t * Process images\n\t\t */\n\t\tinit() {\n\t\t\tconst images = document.getElementsByTagName( 'img' );\n\t\t\tfor ( const image of images ) {\n\t\t\t\tif ( this.shouldSkipImage( image ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// In case image is in correct size - skip.\n\t\t\t\tif (\n\t\t\t\t\t! image.clientWidth * 1.5 < image.naturalWidth &&\n\t\t\t\t\t! image.clientHeight * 1.5 < image.naturalHeight &&\n\t\t\t\t\t! image.clientWidth > image.naturalWidth &&\n\t\t\t\t\t! image.clientHeight > image.naturalHeight\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If not lazy loaded placeholder.\n\t\t\t\tif ( ! this.isDataURL( image.src ) ) {\n\t\t\t\t\timage.src = image.src.replace( this.regex, `w=${ image.clientWidth }` );\n\t\t\t\t\timage.srcset = image.src + ' 1x, ' + image.src.replace( this.regex, `w=${ image.clientWidth * 2 }` ) + ' 2x';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Various checks to see if the image should be processed.\n\t\t *\n\t\t * @param {Object} image\n\t\t * @return {boolean}  Should skip image or not.\n\t\t */\n\t\tshouldSkipImage( image ) {\n\t\t\t// Skip images that do not have our special class.\n\t\t\tif ( ! image.classList.contains( this.class ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Skip 1x1px images.\n\t\t\tif ( image.clientWidth === image.clientHeight && 1 === image.clientWidth ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Skip 1x1px placeholders.\n\t\t\tif ( image.naturalWidth === image.naturalHeight && 1 === image.naturalWidth ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// If width attribute is not set, do not continue.\n\t\t\treturn null === image.clientWidth || null === image.clientHeight;\n\t\t},\n\n\t\t/**\n\t\t * Check if the URL is a lazy-loading placeholder.\n\t\t *\n\t\t * @param {string} url\n\t\t * @return {boolean} Is this a placeholder or not.\n\t\t */\n\t\tisDataURL( url ) {\n\t\t\tconst regex = /^data:image/;\n\t\t\treturn regex.test( url );\n\t\t}\n\t};\n\n\twindow.addEventListener( 'DOMContentLoaded', () => CFAutoImageResize.init() );\n}() );\n"],"names":["CFAutoImageResize","class","regex","init","images","document","getElementsByTagName","image","this","shouldSkipImage","clientWidth","naturalWidth","clientHeight","naturalHeight","isDataURL","src","replace","srcset","classList","contains","url","test","window","addEventListener"],"sourceRoot":""}